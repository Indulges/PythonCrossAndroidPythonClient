# coding=utf-8
from typing import Type

from BaseType_pb2 import Responder

class Java_Proxy(object):
    def __init__(self, responder, python_cross_android):
        self.python_cross_android = python_cross_android
        self.class_name = None
        self.object_hashCode = None
        self.method_name = None
        self._args = []
        self.attribute_name = None
        self.error = None
        self.set_value(responder)
        self.attr_list = ['class_name', 'object_hashCode', 'method_name', 'args', 'attribute_name', 'error']

    def set_value(self, responder):
        if responder is not None:
            if hasattr(responder, 'className'):
                self.class_name = responder.className
            if hasattr(responder, 'objectHashCode'):
                self.object_hashCode = responder.objectHashCode
            if hasattr(responder, 'methodName'):
                self.object_hashCode = responder.methodName
            if hasattr(responder, 'args'):
                self.object_hashCode = responder.args
            if hasattr(responder, 'attribute_name'):
                self.object_hashCode = responder.attribute_name
            if hasattr(responder, 'error'):
                self.object_hashCode = responder.error
        return True



    def __getattribute__(self, *args, **kwargs):
        if args[0] == 'set_value':
            return object.__getattribute__(self, *args, **kwargs)
        else:
            result = None
            try:
                result = object.__getattribute__(self, *args, **kwargs)
            except Exception:
                print("转发")
        if result is None:
            print("转发")
            # print(hasattr(self, args[0]))
        return None
            # if hasattr(self, args[0]):
            #     print(args[0])
            #     return object.__getattribute__(self, *args, **kwargs)
            # else:
            #     return object.python_cross_android.invoke_staticmethod(*args, **kwargs)


    def __call__(self, *args, **kwargs):
        #创建对象
        pass


def packresult(fun):
    def pack(*args,**kwargs):
        object = fun(*args,**kwargs)
        return Java_Proxy(object, args[0])
    return pack

if __name__ == '__main__':
    pass