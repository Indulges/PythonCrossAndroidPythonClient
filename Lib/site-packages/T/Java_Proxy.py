# coding=utf-8
from typing import Type

from BaseType_pb2 import Responder

class Java_Proxy(object):
    def __init__(self, responder, python_cross_android):
        self.python_cross_android = python_cross_android
        self.class_name = None
        self.object_hashCode = None
        self.method_name = None
        self._args = []
        self.attribute_name = None
        self.error = None
        self.is_class = False
        self.set_value(responder)

    def set_value(self, responder):
        if responder is not None:
            if hasattr(responder, 'className'):
                self.class_name = responder.className
            if hasattr(responder, 'objectHashCode'):
                self.object_hashCode = responder.objectHashCode
            if hasattr(responder, 'methodName'):
                self.method_name = responder.methodName
            if hasattr(responder, 'args'):
                self._args = responder.args
            if hasattr(responder, 'attribute_name'):
                self.attribute_name = responder.attributeName
            if hasattr(responder, 'error'):
                self.error = responder.error
            if hasattr(responder, 'isClass'):
                self.is_class = responder.isClass

    def __getattribute__(self, *args, **kwargs):
        result = object.__getattribute__(self, *args, **kwargs)
        return result

    def __getattr__(self, name):
        #这里只走属性
        if self.python_cross_android.has_attribute(self.class_name, name):
            print("获取属性")
        else:
            #走方法
            self.method_name = name
            return self

    def __call__(self, *args, **kwargs):
        print("call")
        #创建对象

        #调用方法
        print("调用方法 {0}   {1}".format(self.class_name, self.method_name))
        return self.python_cross_android.invoke_staticmethod(self.class_name, self.method_name, *args, **kwargs)

    # def get_value(self):
        #获取属性值

def packresult(fun):
    def pack(*args,**kwargs):
        object = fun(*args,**kwargs)
        result = Java_Proxy(object, args[0])
        return result
    return pack

if __name__ == '__main__':
    pass