import subprocess
import time
from asyncio import futures

import grpc

import Java_Proxy

import BaseType_pb2
import PythonCrossAndroid_pb2_grpc

class ProtoTest():

    def __init__(self, channel):
        self.python_test = PythonCrossAndroid_pb2_grpc.PythonCrossAndroidStub(channel)

    @Java_Proxy.packresult
    def invoke_staticmethod(self, class_name, method_name,  *args):
        args_list = []
        for arg in args:
            if type(arg) is int:
                args_list.append(BaseType_pb2.ANY(int32=arg))
            if type(arg) is str:
                args_list.append(BaseType_pb2.ANY(string=arg))
        request = BaseType_pb2.Requester(className=class_name, methodName=method_name,
                                         args=args_list)
        result =  self.python_test.invokeMethod(request)
        print(result)

    @Java_Proxy.packresult
    def find_class(self):
        result = BaseType_pb2.Requester(className='com.example.rxjavatest.PythonTest')
        return result

if __name__ == '__main__':
    # 连接 rpc 服务器
    subprocess.Popen("adb forward tcp:8888 tcp:8888")
    channel = grpc.insecure_channel('localhost:8888')
    # 调用 rpc 服务
    test = ProtoTest(channel)

    start_time = time.time()
    respose = test.invoke_staticmethod('com.example.rxjavatest.PythonTest', 'pythonTest1', '测试', 112)
    # respose = test.find_class()
    # respose.pythonTest1('测试', 112)
    print(respose.class_name)

    end_time = time.time()
    print(start_time)
    print(end_time)

