import subprocess
import time


import grpc

import Java_Proxy

import BaseType_pb2
import PythonCrossAndroid_pb2_grpc

class ProtoTest():

    def __init__(self, channel):
        self.python_test = PythonCrossAndroid_pb2_grpc.PythonCrossAndroidStub(channel)

    @Java_Proxy.packresult
    def invoke_staticmethod(self, class_name, method_name,  *args):
        args_list = []
        for arg in args:
            if type(arg) is int:
                if arg > 0x7fffffff or arg < 0x80000000:
                    args_list.append(BaseType_pb2.ANY(int64=arg))
                else:
                    args_list.append(BaseType_pb2.ANY(int32=arg))
            elif type(arg) is str:
                args_list.append(BaseType_pb2.ANY(string=arg))
            elif type(arg) is bool:
                args_list.append(BaseType_pb2.ANY(bool=arg))
            elif type(arg) is float:
                args_list.append(BaseType_pb2.ANY(float=arg))
            #double类型比较麻烦，有时间再搞
        request = BaseType_pb2.Requester(className=class_name, methodName=method_name,
                                         args=args_list)
        result = self.python_test.invokeMethod(request)
        return result

    @Java_Proxy.packresult
    def find_class(self):
        request = BaseType_pb2.Requester(className='com.example.rxjavatest.PythonTest')
        return self.python_test.findClass(request)
    

    def has_attribute_name(self, class_name, attribute_name):
        request = BaseType_pb2.Requester(className=class_name, attributeName=attribute_name)
        return self.python_test.findClass(request)

    def get_attribute_name(self, attribute_name, objectHashCode):
        request = BaseType_pb2.Requester(className='com.example.rxjavatest.PythonTest', attributeName = attribute_name, objectHashCode = objectHashCode)
        return self.python_test.findClass(request)

    def has_attribute(self, class_name, attribute_name):
        request = BaseType_pb2.Requester(className=class_name, attributeName=attribute_name)
        return self.python_test.hasAttribute(request).value

if __name__ == '__main__':
    # 连接 rpc 服务器
    subprocess.Popen("adb forward tcp:8888 tcp:8888")
    channel = grpc.insecure_channel('localhost:8888')
    # 调用 rpc 服务
    test = ProtoTest(channel)

    start_time = time.time()
    # respose = test.invoke_staticmethod('com.example.rxjavatest.PythonTest', 'pythonTest1', '测试', 112)com.example.rxjavatest.PythonTest
    respose = test.find_class()
    result = respose.pythonTest1("test", 11111)
    # print(test.has_attribute('com.example.rxjavatest.PythonTest', 'age').value)
    print('result is 222{0}'.format(result))
    # print(respose.test)





