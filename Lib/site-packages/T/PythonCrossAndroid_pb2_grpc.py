# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import BaseType_pb2 as BaseType__pb2
import PythonCrossAndroid_pb2 as PythonCrossAndroid__pb2


class PythonCrossAndroidStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.invokeMethod = channel.unary_unary(
                '/com.example.rxjavatest.PythonCrossAndroid/invokeMethod',
                request_serializer=BaseType__pb2.Requester.SerializeToString,
                response_deserializer=BaseType__pb2.Responder.FromString,
                )
        self.findClass = channel.unary_unary(
                '/com.example.rxjavatest.PythonCrossAndroid/findClass',
                request_serializer=BaseType__pb2.Requester.SerializeToString,
                response_deserializer=BaseType__pb2.Responder.FromString,
                )
        self.creteInstance = channel.unary_unary(
                '/com.example.rxjavatest.PythonCrossAndroid/creteInstance',
                request_serializer=BaseType__pb2.Requester.SerializeToString,
                response_deserializer=BaseType__pb2.Responder.FromString,
                )
        self.setAttribute = channel.unary_unary(
                '/com.example.rxjavatest.PythonCrossAndroid/setAttribute',
                request_serializer=BaseType__pb2.Requester.SerializeToString,
                response_deserializer=BaseType__pb2.VOID.FromString,
                )
        self.getAttribute = channel.unary_unary(
                '/com.example.rxjavatest.PythonCrossAndroid/getAttribute',
                request_serializer=BaseType__pb2.Requester.SerializeToString,
                response_deserializer=PythonCrossAndroid__pb2.AttributeValueRespose.FromString,
                )
        self.hasAttribute = channel.unary_unary(
                '/com.example.rxjavatest.PythonCrossAndroid/hasAttribute',
                request_serializer=BaseType__pb2.Requester.SerializeToString,
                response_deserializer=BaseType__pb2.BOOLEAN.FromString,
                )


class PythonCrossAndroidServicer(object):
    """Missing associated documentation comment in .proto file."""

    def invokeMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def creteInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAttribute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttribute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasAttribute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PythonCrossAndroidServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'invokeMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.invokeMethod,
                    request_deserializer=BaseType__pb2.Requester.FromString,
                    response_serializer=BaseType__pb2.Responder.SerializeToString,
            ),
            'findClass': grpc.unary_unary_rpc_method_handler(
                    servicer.findClass,
                    request_deserializer=BaseType__pb2.Requester.FromString,
                    response_serializer=BaseType__pb2.Responder.SerializeToString,
            ),
            'creteInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.creteInstance,
                    request_deserializer=BaseType__pb2.Requester.FromString,
                    response_serializer=BaseType__pb2.Responder.SerializeToString,
            ),
            'setAttribute': grpc.unary_unary_rpc_method_handler(
                    servicer.setAttribute,
                    request_deserializer=BaseType__pb2.Requester.FromString,
                    response_serializer=BaseType__pb2.VOID.SerializeToString,
            ),
            'getAttribute': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttribute,
                    request_deserializer=BaseType__pb2.Requester.FromString,
                    response_serializer=PythonCrossAndroid__pb2.AttributeValueRespose.SerializeToString,
            ),
            'hasAttribute': grpc.unary_unary_rpc_method_handler(
                    servicer.hasAttribute,
                    request_deserializer=BaseType__pb2.Requester.FromString,
                    response_serializer=BaseType__pb2.BOOLEAN.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.example.rxjavatest.PythonCrossAndroid', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PythonCrossAndroid(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def invokeMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.rxjavatest.PythonCrossAndroid/invokeMethod',
            BaseType__pb2.Requester.SerializeToString,
            BaseType__pb2.Responder.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.rxjavatest.PythonCrossAndroid/findClass',
            BaseType__pb2.Requester.SerializeToString,
            BaseType__pb2.Responder.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def creteInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.rxjavatest.PythonCrossAndroid/creteInstance',
            BaseType__pb2.Requester.SerializeToString,
            BaseType__pb2.Responder.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setAttribute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.rxjavatest.PythonCrossAndroid/setAttribute',
            BaseType__pb2.Requester.SerializeToString,
            BaseType__pb2.VOID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAttribute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.rxjavatest.PythonCrossAndroid/getAttribute',
            BaseType__pb2.Requester.SerializeToString,
            PythonCrossAndroid__pb2.AttributeValueRespose.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hasAttribute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.example.rxjavatest.PythonCrossAndroid/hasAttribute',
            BaseType__pb2.Requester.SerializeToString,
            BaseType__pb2.BOOLEAN.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
